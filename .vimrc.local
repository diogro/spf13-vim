colorscheme ir_black

" espaços virtuais
set virtualedit=all

" padrão costuma ser bash
set shell=/bin/zsh

" change com limites
set cpoptions+=$

" Abrindo a lista de revisao
map <leader>g :GundoToggle<CR>CR

" Highlight de linhas maiores que 80 chars
autocmd FileType python highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd FileType python match OverLength /\%81v.\+/

" Alguns atalhos simples.
ab #i #include <>
ab #d #define
ab #f for(;;){}
ab #w while(){}

" Atalho pra \(\), coloca o cursor dentro do agrupador
cmap ;\ \(\)<Left><Left>

" Atalho pra substituição global, coloca o cursor dentro do agrupador
cmap ;; %s:::g<Left><Left><Left>

" Arrow key remapping: Up/Dn = move line up/dn; Left/Right = indent/unindent
function! DelEmptyLineAbove()
    if line(".") == 1
        return
    endif
    let l:line = getline(line(".") - 1)
    if l:line =~ '^\s*$'
        let l:colsave = col(".")
        .-1d
        silent normal! <c-y>
        call cursor(line("."), l:colsave)
    endif
endfunction

function! AddEmptyLineAbove()
    let l:scrolloffsave = &scrolloff
    " Avoid jerky scrolling with ^E at top of window
    set scrolloff=0
    call append(line(".") - 1, "")
    if winline() != winheight(0)
        silent normal! <c-e>
    endif
    let &scrolloff = l:scrolloffsave
endfunction

function! DelEmptyLineBelow()
    if line(".") == line("$")
        return
    endif
    let l:line = getline(line(".") + 1)
    if l:line =~ '^\s*$'
        let l:colsave = col(".")
        .+1d
        ''
        call cursor(line("."), l:colsave)
    endif
endfunction

function! AddEmptyLineBelow()
    call append(line("."), "")
endfunction

function! SetArrowKeysAsTextShifters()
    " normal mode
    nmap <silent> <right> >> 
    nmap <silent> <left> << 
    nnoremap <silent> <up> <esc>:call DelEmptyLineAbove() <cr> 
    nnoremap <silent> <down> <esc>:call AddEmptyLineAbove() <cr> 
    nnoremap <silent> <c-up> <esc>:call DelEmptyLineBelow() <cr> 
    nnoremap <silent> <c-down> <esc>:call AddEmptyLineBelow()  <cr>  

    " visual mode
    vmap <silent> <right> >
    vmap <silent> <left> <
    vnoremap <silent> <up> <esc>:call DelEmptyLineAbove()  <cr>  gv
    vnoremap <silent> <down> <esc>:call AddEmptyLineAbove()  <cr>  gv
    vnoremap <silent> <c-up> <esc>:call DelEmptyLineBelow()  <cr>  gv
    vnoremap <silent> <c-down> <esc>:call AddEmptyLineBelow()  <cr>  gv

    " insert mode
    imap <silent> <left> <c-d>
    imap <silent> <right> <c-t>
    inoremap <silent> <up> <esc>:call DelEmptyLineAbove() <cr> a
    inoremap <silent> <down> <esc>:call AddEmptyLineAbove() <cr> a
    inoremap <silent> <c-up> <esc>:call DelEmptyLineBelow() <cr> a
    inoremap <silent> <c-down> <esc>:call AddEmptyLineBelow() <cr> a

    " disable modified versions we are not using
    nnoremap  <s-up> <nop>
    nnoremap  <s-down> <nop>
    nnoremap  <s-left> <nop>
    nnoremap  <s-right> <nop>
    vnoremap  <s-up> <nop>
    vnoremap  <s-down> <nop>
    vnoremap  <s-left> <nop>
    vnoremap  <s-right> <nop>
    inoremap  <s-up> <nop>
    inoremap  <s-down> <nop>
    inoremap  <s-left> <nop>
    inoremap  <s-right> <nop>
endfunction

call SetArrowKeysAsTextShifters()

" Single insertion
function! RepeatChar(char, count)
    return repeat(a:char, a:count)
endfunction
nnoremap s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<cr>
nnoremap S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<cr>
