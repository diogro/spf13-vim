if !exists("g:bundles")
    let g:bundles = g:vundle#bundles
endif
UnBundle 'spf13/vim-autoclose'

"Colors
colorscheme ir_black

let TERM = "xterm-256color"

"line wrap
set tw=79
set wm=2
set wrap linebreak nolist

"indent
filetype plugin indent on
syntax on
let AnyFoldActivate=1
set foldlevel=0

"pandoc syntax
augroup pandoc_syntax
    au! BufNewFile,BufFilePRe,BufRead *.md, *.mdk set filetype=markdown.pandoc
augroup END


" Centralizando a tela..."
nmap <space> zz
nmap n nzz
nmap N Nzz

"Desligando a merda do _  = <-"
let vimrplugin_assign = 0

"Comeca com folds abertos"
set nofoldenable

"vim-r-em tudo!"
"source /home/diogro/.vim/bundle/Vim-R-plugin/r-plugin/global_r_plugin.vim

"Testando usar o espaço pra mandar as paradas
vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine
let R_assign = 2


" No spell a não ser que seja latex
set nospell

" Using Par for formatting"
set formatprg=par\ -w72re

" espaços virtuais
set virtualedit=all

" padrão costuma ser bash
set shell=/bin/zsh

" change com limites
set cpoptions+=$

" Abrindo a lista de revisao
map <leader>g :GundoToggle<CR>CR

 "vertical split no R plugin
"let vimrplugin_screenvsplit = 1
let g:ScreenImpl = 'Tmux'

 "Highlight de linhas maiores que 80 chars
autocmd FileType python highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd FileType python match OverLength /\%81v.\+/

"autocmd FileType text highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"autocmd FileType text match OverLength /\%35v.\+/

" Alguns atalhos simples.
ab #i #include <>
ab #d #define
ab #f for(;;){}
ab #w while(){}

" Atalho pra \(\), coloca o cursor dentro do agrupador
cmap ;\ \(\)<Left><Left>

" Atalho pra substituição global, coloca o cursor dentro do agrupador
cmap ;; %s:::g<Left><Left><Left>

" Path da bibliografia pro pandoc ter auto complete
let g:pandoc_bibfiles = '/home/diogro/Dropbox/labbio/bibtex/library_f1000.bib'

" Path do language tool
let g:languagetool_jar = '/home/diogro/.bin/languagetool/LanguageTool.jar'

" Strip trailing spaces throughout an entire file "
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
nnoremap <silent> <F6> :call <SID>StripTrailingWhitespaces()<CR>
autocmd BufWritePre *.tex,*.py,*.js,*.c,*.r :call <SID>StripTrailingWhitespaces()

" Single insertion
function! RepeatChar(char, count)
    return repeat(a:char, a:count)
endfunction

nnoremap <leader>s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<cr>
nnoremap <leader>S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<cr>
